#!/usr/bin/env bash
set -euo pipefail

# Deploy NoctisPro using DuckDNS and reset database for a clean migration
# Usage:
#   sudo bash scripts/deploy_duckdns_freshdb.sh <DUCKDNS_TOKEN> <DUCKDNS_SUBDOMAIN>

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
APP_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
VENV_DIR="$APP_DIR/venv"

TOKEN="${1:-}"
SUBDOMAIN="${2:-}"

if [ "${EUID:-$(id -u)}" -ne 0 ]; then
    echo "This script must be run with sudo or as root." >&2
    exit 1
fi

if [ -z "$TOKEN" ] || [ -z "$SUBDOMAIN" ]; then
    echo "Usage: sudo bash scripts/deploy_duckdns_freshdb.sh <DUCKDNS_TOKEN> <DUCKDNS_SUBDOMAIN>" >&2
    exit 1
fi

echo "[1/7] Installing base packages..."
apt-get update -y
apt-get install -y python3 python3-venv python3-dev build-essential \
    libpq-dev libjpeg-dev zlib1g-dev libopenjp2-7 libssl-dev libffi-dev \
    git redis-server nginx curl

systemctl enable --now redis-server || true

echo "[2/7] Creating/updating virtualenv..."
if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv "$VENV_DIR"
fi
source "$VENV_DIR/bin/activate"
pip install --upgrade pip wheel setuptools
pip install -r "$APP_DIR/requirements.txt"

echo "[3/7] Resetting database (fresh start)..."
# Stop services that might lock the DB
systemctl stop noctispro 2>/dev/null || true
systemctl stop noctis-web 2>/dev/null || true

# Remove sqlite DB if present
if [ -f "$APP_DIR/db.sqlite3" ]; then
    rm -f "$APP_DIR/db.sqlite3"
fi

# Run migrations and collectstatic
"$VENV_DIR/bin/python" "$APP_DIR/manage.py" migrate --noinput
"$VENV_DIR/bin/python" "$APP_DIR/manage.py" collectstatic --noinput

echo "[4/7] Configure DuckDNS updater..."
install -d -m 0755 /etc/noctis
cat > /etc/noctis/duckdns.env <<EOF
DUCKDNS_SUBDOMAIN=$SUBDOMAIN
DUCKDNS_TOKEN=$TOKEN
EOF

install -m 0755 "$APP_DIR/ops/duckdns-update.sh" /usr/local/bin/duckdns-update.sh
cp "$APP_DIR/ops/duckdns-update.service" /etc/systemd/system/duckdns-update.service
cp "$APP_DIR/ops/duckdns-update.timer" /etc/systemd/system/duckdns-update.timer
systemctl daemon-reload
systemctl enable --now duckdns-update.timer

echo "[5/7] Configure environment and services..."
# Build PUBLIC_URL using DuckDNS
PUBLIC_URL="https://$SUBDOMAIN.duckdns.org/"

cat > /etc/noctis/noctis.env <<EOF
# Generated by deploy_duckdns_freshdb.sh
APP_DIR=$APP_DIR
VENV_DIR=$VENV_DIR
DJANGO_SETTINGS_MODULE=noctis_pro.settings
ASGI_APP=noctis_pro.asgi:application
HOST=127.0.0.1
PORT=8000
PYTHONPATH=$APP_DIR
REDIS_URL=redis://127.0.0.1:6379/0
PUBLIC_URL=$PUBLIC_URL
EOF

# Install app services (ASGI + Celery + DICOM if templates exist)
if [ -f "$APP_DIR/ops/noctis-web.service" ]; then
    cp "$APP_DIR/ops/noctis-web.service" /etc/systemd/system/noctis-web.service
fi
if [ -f "$APP_DIR/ops/noctis-celery.service" ]; then
    cp "$APP_DIR/ops/noctis-celery.service" /etc/systemd/system/noctis-celery.service
fi
if [ -f "$APP_DIR/ops/noctis-dicom.service" ]; then
    cp "$APP_DIR/ops/noctis-dicom.service" /etc/systemd/system/noctis-dicom.service
fi
systemctl daemon-reload
systemctl enable --now noctis-web.service 2>/dev/null || true
systemctl enable --now noctis-celery.service 2>/dev/null || true
systemctl enable --now noctis-dicom.service 2>/dev/null || true

echo "[6/7] Configure Nginx for DuckDNS domain..."
NGINX_SITE="/etc/nginx/sites-available/noctis"
sed -e "s#{{SERVER_NAME}}#$SUBDOMAIN.duckdns.org#g" \
    -e "s#{{APP_DIR}}#$APP_DIR#g" \
    "$APP_DIR/ops/nginx-noctis.conf.template" > "$NGINX_SITE"
ln -sf "$NGINX_SITE" /etc/nginx/sites-enabled/noctis
rm -f /etc/nginx/sites-enabled/default
nginx -t
systemctl restart nginx

echo "[7/7] Disable ngrok service if present..."
systemctl stop noctispro-ngrok 2>/dev/null || true
systemctl disable noctispro-ngrok 2>/dev/null || true

echo "[DONE] Deployment finished. Access: $PUBLIC_URL"
echo "You can enable HTTPS later with: certbot --nginx -d $SUBDOMAIN.duckdns.org"

