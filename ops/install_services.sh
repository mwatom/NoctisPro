#!/usr/bin/env bash
set -euo pipefail

# Usage:
#   sudo bash ops/install_services.sh [YOUR_DOMAIN] [DUCKDNS_SUBDOMAIN] [DUCKDNS_TOKEN]
# Behavior:
#   - If YOUR_DOMAIN is provided, Nginx will serve that domain and Certbot will attempt HTTPS.
#   - If YOUR_DOMAIN is omitted, a stable URL is auto-generated like noctis-<machineid>.<your-ip>.sslip.io
#   - If DUCKDNS_SUBDOMAIN and DUCKDNS_TOKEN are provided, we configure a constant DuckDNS name
#     in addition (e.g., https://<subdomain>.duckdns.org), and attempt HTTPS for it as well.

# Resolve app directory from this script's location
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
APP_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
VENV_DIR="$APP_DIR/venv"

# Desired bind for ASGI behind nginx
HOST="127.0.0.1"
PORT="8000"

if [ "${EUID:-$(id -u)}" -ne 0 ]; then
	echo "This script must be run with sudo or as root."
	exit 1
fi

# Inputs
SERVER_NAME="${1:-}"
DUCKDNS_SUBDOMAIN="${2:-}"
DUCKDNS_TOKEN="${3:-}"

# Compute fallback domain if needed
if [ -z "$SERVER_NAME" ]; then
	IP_ADDR="$(curl -fsS4 ifconfig.me || true)"
	if [ -z "$IP_ADDR" ]; then
		IP_ADDR="$(hostname -I 2>/dev/null | awk '{print $1}')"
	fi
	IP_ADDR=${IP_ADDR:-"127.0.0.1"}
	MACHINE_ID="$( (cat /etc/machine-id 2>/dev/null || uuidgen) | tr -d '-' | cut -c1-8 )"
	SERVER_NAME="noctis-$MACHINE_ID.$IP_ADDR.sslip.io"
fi

# Optional constant URL via DuckDNS
DUCK_DOMAIN=""
if [ -n "$DUCKDNS_SUBDOMAIN" ] && [ -n "$DUCKDNS_TOKEN" ]; then
	DUCK_DOMAIN="$DUCKDNS_SUBDOMAIN.duckdns.org"
fi

apt-get update -y
apt-get install -y \
	python3 python3-venv python3-dev build-essential \
	libpq-dev libjpeg-dev zlib1g-dev libopenjp2-7 libssl-dev libffi-dev \
	git redis-server nginx certbot python3-certbot-nginx curl

systemctl enable --now redis-server || true

if [ ! -d "$VENV_DIR" ]; then
	python3 -m venv "$VENV_DIR"
fi
source "$VENV_DIR/bin/activate"

pip install --upgrade pip wheel setuptools
pip install -r "$APP_DIR/requirements.txt"

"$VENV_DIR/bin/python" "$APP_DIR/manage.py" migrate --noinput
"$VENV_DIR/bin/python" "$APP_DIR/manage.py" collectstatic --noinput

# Write environment file consumed by systemd units
install -d -m 0755 /etc/noctis
PUBLIC_URL="http://$SERVER_NAME/"
if [ -n "$DUCK_DOMAIN" ]; then
	PUBLIC_URL="https://$DUCK_DOMAIN/"
fi
cat > /etc/noctis/noctis.env <<EOF
# Generated by ops/install_services.sh
APP_DIR=$APP_DIR
VENV_DIR=$VENV_DIR

DJANGO_SETTINGS_MODULE=noctis_pro.settings
ASGI_APP=noctis_pro.asgi:application

HOST=$HOST
PORT=$PORT
PYTHONPATH=$APP_DIR

CELERY_APP=noctis_pro
CELERY_LOGLEVEL=info

REDIS_URL=redis://127.0.0.1:6379/0

DICOM_PORT=11112
DICOM_AET=NOCTIS_SCP

PUBLIC_URL=$PUBLIC_URL
EOF

# Optionally configure DuckDNS for a constant name
if [ -n "$DUCKDNS_SUBDOMAIN" ] && [ -n "$DUCKDNS_TOKEN" ]; then
	cat > /etc/noctis/duckdns.env <<EOD
DUCKDNS_SUBDOMAIN=$DUCKDNS_SUBDOMAIN
DUCKDNS_TOKEN=$DUCKDNS_TOKEN
EOD
	install -m 0755 "$APP_DIR/ops/duckdns-update.sh" /usr/local/bin/duckdns-update.sh
	cp "$APP_DIR/ops/duckdns-update.service" /etc/systemd/system/duckdns-update.service
	cp "$APP_DIR/ops/duckdns-update.timer" /etc/systemd/system/duckdns-update.timer
	
	systemctl daemon-reload
	systemctl enable --now duckdns-update.timer || true
fi

# Install systemd services for the app
cp "$APP_DIR/ops/noctis-web.service" /etc/systemd/system/noctis-web.service
cp "$APP_DIR/ops/noctis-celery.service" /etc/systemd/system/noctis-celery.service
cp "$APP_DIR/ops/noctis-dicom.service" /etc/systemd/system/noctis-dicom.service

systemctl daemon-reload
systemctl enable --now noctis-web.service noctis-celery.service noctis-dicom.service

# Render nginx site from template with the resolved domain(s) and paths
SERVER_NAMES="$SERVER_NAME"
if [ -n "$DUCK_DOMAIN" ]; then
	SERVER_NAMES="$SERVER_NAMES $DUCK_DOMAIN"
fi
NGINX_SITE="/etc/nginx/sites-available/noctis"
sed -e "s|{{SERVER_NAME}}|$SERVER_NAMES|g" \
	-e "s|{{APP_DIR}}|$APP_DIR|g" \
	"$APP_DIR/ops/nginx-noctis.conf.template" > "$NGINX_SITE"
ln -sf "$NGINX_SITE" /etc/nginx/sites-enabled/noctis
rm -f /etc/nginx/sites-enabled/default

nginx -t
systemctl restart nginx

# Open firewall (ignore if ufw is not installed)
ufw allow "Nginx Full" || true
ufw allow 11112/tcp || true

# Attempt HTTPS using nginx plugin for one or both names
if [ -n "$DUCK_DOMAIN" ]; then
	certbot --nginx --non-interactive --agree-tos --register-unsafely-without-email \
		--redirect -d "$SERVER_NAME" -d "$DUCK_DOMAIN" || true
else
	certbot --nginx --non-interactive --agree-tos --register-unsafely-without-email \
		--redirect -d "$SERVER_NAME" || true
fi

# Final message
echo
echo "Setup complete."
echo "Primary URL: http://$SERVER_NAME/"
if [ -n "$DUCK_DOMAIN" ]; then
	echo "Constant URL: https://$DUCK_DOMAIN/ (auto-updated via systemd timer)"
fi
echo "Admin: $PUBLIC_URL/admin-panel/"
echo "Worklist: $PUBLIC_URL/worklist/"
echo "Services: noctis-web, noctis-celery, noctis-dicom"