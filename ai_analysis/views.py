from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required, user_passes_test
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.contrib import messages
from django.db.models import Q, Count, Avg
from django.core.paginator import Paginator
from django.utils import timezone
from datetime import datetime, timedelta
import json
import numpy as np
import pydicom
import os
import threading
import time

from worklist.models import Study, DicomImage, Series
from accounts.models import User
from .models import (
    AIModel, AIAnalysis, AutoReportTemplate, AutoGeneratedReport,
    AITrainingData, AIPerformanceMetric, AIFeedback
)

def is_admin_or_radiologist(user):
    """Check if user is admin or radiologist"""
    return user.is_authenticated and (user.is_admin() or user.is_radiologist())

@login_required
def ai_dashboard(request):
    """AI analysis dashboard with comprehensive overview"""
    user = request.user
    
    # Get AI models statistics
    total_models = AIModel.objects.filter(is_active=True).count()
    active_analyses = AIAnalysis.objects.filter(status__in=['pending', 'processing']).count()
    completed_today = AIAnalysis.objects.filter(
        completed_at__date=timezone.now().date(),
        status='completed'
    ).count()
    
    # Get recent analyses
    if user.is_facility_user():
        recent_analyses = AIAnalysis.objects.filter(
            study__facility=user.facility
        ).select_related('study', 'ai_model').order_by('-requested_at')[:10]
    else:
        recent_analyses = AIAnalysis.objects.select_related(
            'study', 'ai_model'
        ).order_by('-requested_at')[:10]
    
    # Get pending auto-reports
    if user.is_radiologist() or user.is_admin():
        pending_reports = AutoGeneratedReport.objects.filter(
            review_status='pending'
        ).select_related('study', 'ai_analysis').order_by('-generated_at')[:5]
    else:
        pending_reports = []
    
    # Get model performance summary
    model_performance = []
    for model in AIModel.objects.filter(is_active=True)[:5]:
        latest_metric = model.performance_metrics.first()
        model_performance.append({
            'model': model,
            'accuracy': latest_metric.accuracy if latest_metric else 0,
            'total_analyses': model.total_analyses,
            'avg_time': model.avg_processing_time
        })
    
    context = {
        'total_models': total_models,
        'active_analyses': active_analyses,
        'completed_today': completed_today,
        'recent_analyses': recent_analyses,
        'pending_reports': pending_reports,
        'model_performance': model_performance,
        'user': user,
    }
    
    return render(request, 'ai_analysis/dashboard.html', context)

@login_required
@csrf_exempt
def analyze_study(request, study_id):
    """Run AI analysis on study"""
    study = get_object_or_404(Study, id=study_id)
    user = request.user
    
    # Check permissions
    if user.is_facility_user() and study.facility != user.facility:
        return JsonResponse({'error': 'Permission denied'}, status=403)
    
    if request.method == 'POST':
        try:
            # Get selected AI models
            model_ids = request.POST.getlist('ai_models')
            priority = request.POST.get('priority', 'normal')
            
            if not model_ids:
                return JsonResponse({'error': 'Please select at least one AI model'}, status=400)
            
            # Create analyses for each selected model
            analyses = []
            for model_id in model_ids:
                ai_model = get_object_or_404(AIModel, id=model_id, is_active=True)
                
                # Check if analysis already exists
                existing = AIAnalysis.objects.filter(
                    study=study,
                    ai_model=ai_model,
                    status__in=['pending', 'processing', 'completed']
                ).first()
                
                if existing:
                    continue
                
                # Create new analysis
                analysis = AIAnalysis.objects.create(
                    study=study,
                    ai_model=ai_model,
                    priority=priority,
                    status='pending'
                )
                analyses.append(analysis)
            
            # Start processing in background
            if analyses:
                threading.Thread(
                    target=process_ai_analyses,
                    args=(analyses,),
                    daemon=True
                ).start()
            
            return JsonResponse({
                'success': True,
                'message': f'Started AI analysis with {len(analyses)} models',
                'analysis_ids': [a.id for a in analyses]
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    # GET request - show analysis form
    available_models = AIModel.objects.filter(
        is_active=True,
        modality__in=[study.modality.code, 'ALL']
    )
    
    # Get existing analyses
    existing_analyses = AIAnalysis.objects.filter(
        study=study
    ).select_related('ai_model').order_by('-requested_at')
    
    context = {
        'study': study,
        'available_models': available_models,
        'existing_analyses': existing_analyses,
    }
    
    return render(request, 'ai_analysis/analyze_study.html', context)

@login_required
@csrf_exempt
def api_analysis_status(request, analysis_id):
    """Get analysis status and progress"""
    analysis = get_object_or_404(AIAnalysis, id=analysis_id)
    user = request.user
    
    # Check permissions
    if user.is_facility_user() and analysis.study.facility != user.facility:
        return JsonResponse({'error': 'Permission denied'}, status=403)
    
    progress_percentage = 0
    if analysis.status == 'completed':
        progress_percentage = 100
    elif analysis.status == 'processing':
        # Estimate progress based on processing time
        if analysis.started_at:
            elapsed = (timezone.now() - analysis.started_at).total_seconds()
            estimated_total = analysis.ai_model.avg_processing_time or 60
            progress_percentage = min(90, (elapsed / estimated_total) * 100)
    
    data = {
        'id': analysis.id,
        'status': analysis.status,
        'progress_percentage': round(progress_percentage, 2),
        'confidence_score': analysis.confidence_score,
        'findings': analysis.findings,
        'abnormalities_detected': analysis.abnormalities_detected,
        'measurements': analysis.measurements,
        'processing_time': analysis.processing_time,
        'error_message': analysis.error_message,
        'requested_at': analysis.requested_at.isoformat(),
        'completed_at': analysis.completed_at.isoformat() if analysis.completed_at else None,
        'ai_model': {
            'name': analysis.ai_model.name,
            'version': analysis.ai_model.version,
            'type': analysis.ai_model.model_type
        }
    }
    
    return JsonResponse(data)

@login_required
@csrf_exempt
def generate_auto_report(request, study_id):
    """Generate automatic report from AI analysis"""
    study = get_object_or_404(Study, id=study_id)
    user = request.user
    
    # Check permissions
    if user.is_facility_user() and study.facility != user.facility:
        return JsonResponse({'error': 'Permission denied'}, status=403)
    
    try:
        # Get completed AI analyses for this study
        analyses = AIAnalysis.objects.filter(
            study=study,
            status='completed'
        ).select_related('ai_model')
        
        if not analyses:
            return JsonResponse({'error': 'No completed AI analyses found for this study'}, status=400)
        
        # Find appropriate template
        template = AutoReportTemplate.objects.filter(
            modality=study.modality.code,
            body_part__icontains=study.body_part,
            is_active=True
        ).first()
        
        if not template:
            # Use generic template
            template = AutoReportTemplate.objects.filter(
                modality=study.modality.code,
                is_active=True
            ).first()
        
        if not template:
            return JsonResponse({'error': 'No suitable report template found'}, status=400)
        
        # Generate report content
        report_data = generate_report_content(study, analyses, template)
        
        # Create auto-generated report
        auto_report = AutoGeneratedReport.objects.create(
            study=study,
            template=template,
            ai_analysis=analyses.first(),  # Primary analysis
            generated_findings=report_data['findings'],
            generated_impression=report_data['impression'],
            generated_recommendations=report_data['recommendations'],
            overall_confidence=report_data['confidence'],
            requires_review=report_data['confidence'] < template.confidence_threshold
        )
        
        return JsonResponse({
            'success': True,
            'report_id': auto_report.id,
            'findings': auto_report.generated_findings,
            'impression': auto_report.generated_impression,
            'recommendations': auto_report.generated_recommendations,
            'confidence': auto_report.overall_confidence,
            'requires_review': auto_report.requires_review
        })
        
    except Exception as e:
        return JsonResponse({'error': f'Error generating report: {str(e)}'}, status=500)

@login_required
@user_passes_test(is_admin_or_radiologist)
def review_auto_report(request, report_id):
    """Review and approve/modify auto-generated report"""
    auto_report = get_object_or_404(AutoGeneratedReport, id=report_id)
    user = request.user
    
    # Check permissions
    if user.is_facility_user() and auto_report.study.facility != user.facility:
        messages.error(request, 'Permission denied')
        return redirect('ai_analysis:ai_dashboard')
    
    if request.method == 'POST':
        action = request.POST.get('action')
        
        if action == 'approve':
            auto_report.review_status = 'approved'
            auto_report.reviewed_by = user
            auto_report.reviewed_at = timezone.now()
            auto_report.review_comments = request.POST.get('comments', '')
            auto_report.save()
            
            # Create final report (when reports app is available)
            # auto_report.approve_and_create_report(user)
            
            messages.success(request, 'Auto-generated report approved successfully')
            
        elif action == 'modify':
            auto_report.generated_findings = request.POST.get('findings')
            auto_report.generated_impression = request.POST.get('impression')
            auto_report.generated_recommendations = request.POST.get('recommendations')
            auto_report.review_status = 'modified'
            auto_report.reviewed_by = user
            auto_report.reviewed_at = timezone.now()
            auto_report.review_comments = request.POST.get('comments', '')
            auto_report.save()
            
            messages.success(request, 'Auto-generated report modified and approved')
            
        elif action == 'reject':
            auto_report.review_status = 'rejected'
            auto_report.reviewed_by = user
            auto_report.reviewed_at = timezone.now()
            auto_report.review_comments = request.POST.get('comments', '')
            auto_report.save()
            
            messages.success(request, 'Auto-generated report rejected')
        
        return redirect('ai_analysis:ai_dashboard')
    
    # GET request - show review form
    context = {
        'auto_report': auto_report,
        'study': auto_report.study,
        'ai_analysis': auto_report.ai_analysis,
    }
    
    return render(request, 'ai_analysis/review_auto_report.html', context)

@login_required
@csrf_exempt
def api_ai_feedback(request, analysis_id):
    """Submit feedback on AI analysis"""
    analysis = get_object_or_404(AIAnalysis, id=analysis_id)
    user = request.user
    
    # Check permissions
    if user.is_facility_user() and analysis.study.facility != user.facility:
        return JsonResponse({'error': 'Permission denied'}, status=403)
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            
            feedback = AIFeedback.objects.create(
                ai_analysis=analysis,
                user=user,
                feedback_type=data.get('feedback_type'),
                rating=data.get('rating'),
                comments=data.get('comments', ''),
                incorrect_findings=data.get('incorrect_findings', []),
                missed_findings=data.get('missed_findings', []),
                suggestions=data.get('suggestions', '')
            )
            
            return JsonResponse({
                'success': True,
                'feedback_id': feedback.id,
                'message': 'Feedback submitted successfully'
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    return JsonResponse({'error': 'Method not allowed'}, status=405)

@login_required
@user_passes_test(lambda u: u.is_admin())
def model_management(request):
    """AI model management interface"""
    models = AIModel.objects.all().order_by('-created_at')
    
    # Search and filtering
    search_query = request.GET.get('search', '')
    if search_query:
        models = models.filter(
            Q(name__icontains=search_query) |
            Q(description__icontains=search_query) |
            Q(modality__icontains=search_query)
        )
    
    model_type_filter = request.GET.get('model_type', '')
    if model_type_filter:
        models = models.filter(model_type=model_type_filter)
    
    # Pagination
    paginator = Paginator(models, 20)
    page_number = request.GET.get('page')
    models_page = paginator.get_page(page_number)
    
    context = {
        'models': models_page,
        'search_query': search_query,
        'model_type_filter': model_type_filter,
        'model_types': AIModel.MODEL_TYPES,
    }
    
    return render(request, 'ai_analysis/model_management.html', context)

@login_required
@csrf_exempt
def api_realtime_analyses(request):
    """Get real-time AI analysis updates"""
    user = request.user
    
    # Get timestamp from request
    last_update = request.GET.get('last_update')
    
    try:
        if last_update:
            last_update_time = timezone.datetime.fromisoformat(last_update.replace('Z', '+00:00'))
        else:
            last_update_time = timezone.now() - timezone.timedelta(minutes=5)
    except:
        last_update_time = timezone.now() - timezone.timedelta(minutes=5)
    
    # Get analyses updated since last check
    if user.is_facility_user():
        analyses = AIAnalysis.objects.filter(
            study__facility=user.facility,
            requested_at__gt=last_update_time
        ).select_related('study', 'ai_model').order_by('-requested_at')[:20]
    else:
        analyses = AIAnalysis.objects.filter(
            requested_at__gt=last_update_time
        ).select_related('study', 'ai_model').order_by('-requested_at')[:20]
    
    analyses_data = []
    for analysis in analyses:
        analyses_data.append({
            'id': analysis.id,
            'study_id': analysis.study.id,
            'accession_number': analysis.study.accession_number,
            'patient_name': analysis.study.patient.full_name,
            'ai_model': analysis.ai_model.name,
            'status': analysis.status,
            'confidence_score': analysis.confidence_score,
            'priority': analysis.priority,
            'requested_at': analysis.requested_at.isoformat(),
            'completed_at': analysis.completed_at.isoformat() if analysis.completed_at else None,
        })
    
    return JsonResponse({
        'analyses': analyses_data,
        'timestamp': timezone.now().isoformat(),
        'count': len(analyses_data)
    })

def process_ai_analyses(analyses):
    """Background task to process AI analyses"""
    for analysis in analyses:
        try:
            analysis.start_processing()
            
            # Simulate AI processing (replace with actual AI model inference)
            results = simulate_ai_analysis(analysis)
            
            # Complete the analysis
            analysis.complete_analysis(results)
            
            # Update model statistics
            model = analysis.ai_model
            model.total_analyses += 1
            if analysis.processing_time:
                # Update average processing time
                if model.avg_processing_time > 0:
                    model.avg_processing_time = (
                        model.avg_processing_time + analysis.processing_time
                    ) / 2
                else:
                    model.avg_processing_time = analysis.processing_time
            model.save()
            
        except Exception as e:
            analysis.status = 'failed'
            analysis.error_message = str(e)
            analysis.save()

def simulate_ai_analysis(analysis):
    """Simulate AI analysis (replace with actual AI model)"""
    # Simulate processing time
    time.sleep(2)
    
    # Generate mock results based on modality
    modality = analysis.study.modality.code
    
    if modality == 'CT':
        findings = "No acute intracranial abnormality. Brain parenchyma appears normal."
        abnormalities = []
        confidence = 0.92
        measurements = {"brain_volume": "1450 mL", "ventricle_size": "normal"}
    elif modality == 'MR':
        findings = "Normal brain MRI. No evidence of acute infarction or hemorrhage."
        abnormalities = []
        confidence = 0.89
        measurements = {"lesion_count": 0, "white_matter": "normal"}
    elif modality == 'XR':
        findings = "Chest X-ray shows clear lungs. Heart size is normal."
        abnormalities = []
        confidence = 0.87
        measurements = {"heart_size": "normal", "lung_fields": "clear"}
    else:
        findings = "Study reviewed by AI. No acute abnormalities detected."
        abnormalities = []
        confidence = 0.85
        measurements = {}
    
    return {
        'findings': findings,
        'abnormalities': abnormalities,
        'confidence': confidence,
        'measurements': measurements
    }

def generate_report_content(study, analyses, template):
    """Generate report content from AI analyses"""
    # Aggregate findings from all analyses
    all_findings = []
    all_abnormalities = []
    confidence_scores = []
    
    for analysis in analyses:
        if analysis.findings:
            all_findings.append(f"[{analysis.ai_model.name}] {analysis.findings}")
        if analysis.abnormalities_detected:
            all_abnormalities.extend(analysis.abnormalities_detected)
        if analysis.confidence_score:
            confidence_scores.append(analysis.confidence_score)
    
    # Calculate overall confidence
    overall_confidence = np.mean(confidence_scores) if confidence_scores else 0.5
    
    # Generate findings section
    findings_text = template.findings_template.format(
        patient_name=study.patient.full_name,
        study_date=study.study_date.strftime('%Y-%m-%d'),
        modality=study.modality.name,
        findings='; '.join(all_findings) if all_findings else 'No significant findings detected.'
    )
    
    # Generate impression
    if all_abnormalities:
        impression_text = f"Abnormalities detected: {', '.join([str(a) for a in all_abnormalities])}"
    else:
        impression_text = "No acute abnormalities detected by AI analysis."
    
    # Generate recommendations
    recommendations_text = template.recommendations_template or "Recommend correlation with clinical findings."
    
    return {
        'findings': findings_text,
        'impression': impression_text,
        'recommendations': recommendations_text,
        'confidence': overall_confidence
    }
