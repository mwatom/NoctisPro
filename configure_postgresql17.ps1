# NoctisPro PostgreSQL 17 Configuration Script for Windows Server 2019
# Configures PostgreSQL 17 for NoctisPro DICOM system
# Run as Administrator in PowerShell

param(
    [string]$InstallPath = "C:\noctis",
    [string]$PostgreSQLVersion = "17",
    [string]$DBName = "noctispro",
    [string]$DBUser = "noctispro_user",
    [string]$DBPassword = "NoctisPro2024!"
)

$ErrorActionPreference = 'Stop'

Write-Host "üêò Configuring PostgreSQL 17 for NoctisPro..." -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Cyan

# Function to check if PostgreSQL 17 is installed
function Test-PostgreSQL17 {
    try {
        $pgService = Get-Service -Name "postgresql-x64-17" -ErrorAction SilentlyContinue
        return $pgService -ne $null
    } catch {
        return $false
    }
}

# Check if PostgreSQL 17 is installed
if (-not (Test-PostgreSQL17)) {
    Write-Host "‚ùå PostgreSQL 17 not found. Please install PostgreSQL 17 first." -ForegroundColor Red
    Write-Host "üí° Download from: https://www.postgresql.org/download/windows/" -ForegroundColor Yellow
    Write-Host "üí° After installation, run this script again." -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ PostgreSQL 17 detected" -ForegroundColor Green

# Step 1: Start PostgreSQL service
Write-Host "`nüîß Starting PostgreSQL 17 service..." -ForegroundColor Yellow
try {
    Set-Service -Name "postgresql-x64-17" -StartupType Automatic
    Start-Service -Name "postgresql-x64-17"
    Write-Host "‚úÖ PostgreSQL 17 service started" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  PostgreSQL service issue: $_" -ForegroundColor Yellow
}

# Step 2: Configure database
Write-Host "`nüóÑÔ∏è  Setting up NoctisPro database..." -ForegroundColor Yellow

$psqlPath = "C:\Program Files\PostgreSQL\17\bin\psql.exe"
if (-not (Test-Path $psqlPath)) {
    # Try alternative paths
    $possiblePaths = @(
        "C:\Program Files\PostgreSQL\17\bin\psql.exe",
        "C:\PostgreSQL\17\bin\psql.exe",
        "C:\Program Files (x86)\PostgreSQL\17\bin\psql.exe"
    )
    
    foreach ($path in $possiblePaths) {
        if (Test-Path $path) {
            $psqlPath = $path
            break
        }
    }
}

if (-not (Test-Path $psqlPath)) {
    Write-Host "‚ùå PostgreSQL 17 psql.exe not found in expected locations" -ForegroundColor Red
    Write-Host "üí° Please verify PostgreSQL 17 installation" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Found psql at: $psqlPath" -ForegroundColor Green

# Create database setup script
$dbSetupScript = @"
-- NoctisPro PostgreSQL 17 Database Setup
-- Create database and user for NoctisPro DICOM system

-- Create database
CREATE DATABASE $DBName;

-- Create user
CREATE USER $DBUser WITH PASSWORD '$DBPassword';

-- Grant privileges
GRANT ALL PRIVILEGES ON DATABASE $DBName TO $DBUser;
ALTER USER $DBUser CREATEDB;

-- Set connection limits
ALTER USER $DBUser CONNECTION LIMIT 50;

-- Exit
\q
"@

$tempSqlFile = "$env:TEMP\noctispro_setup.sql"
$dbSetupScript | Out-File -FilePath $tempSqlFile -Encoding UTF8

try {
    Write-Host "üìù Creating database and user..." -ForegroundColor Cyan
    & $psqlPath -U postgres -f $tempSqlFile
    Write-Host "‚úÖ Database setup completed" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Database setup may have had warnings (this is often normal)" -ForegroundColor Yellow
} finally {
    Remove-Item $tempSqlFile -Force -ErrorAction SilentlyContinue
}

# Step 3: Create environment configuration for PostgreSQL 17
Write-Host "`n‚öôÔ∏è  Creating PostgreSQL 17 environment configuration..." -ForegroundColor Yellow

$envContent = @"
# NoctisPro Environment Configuration for PostgreSQL 17
# Generated by configure_postgresql17.ps1

# Database Configuration
DB_ENGINE=django.db.backends.postgresql
DB_NAME=$DBName
DB_USER=$DBUser
DB_PASSWORD=$DBPassword
DB_HOST=localhost
DB_PORT=5432

# Django Configuration
SECRET_KEY=noctispro-postgresql17-production-key-change-this-in-production
DEBUG=False
ALLOWED_HOSTS=*

# Redis Configuration (if using Redis)
REDIS_URL=redis://localhost:6379/0

# DICOM Configuration
DICOM_AE_TITLE=NOCTISPRO
DICOM_PORT=11112

# Production Settings
ENVIRONMENT=production
DJANGO_SETTINGS_MODULE=noctis_pro.settings_universal
"@

$envFile = "$InstallPath\.env"
$envContent | Out-File -FilePath $envFile -Encoding UTF8
Write-Host "‚úÖ Environment file created: $envFile" -ForegroundColor Green

# Step 4: Install psycopg2 for PostgreSQL 17
Write-Host "`nüì¶ Installing PostgreSQL 17 Python adapter..." -ForegroundColor Yellow

try {
    Set-Location $InstallPath
    & ".venv\Scripts\Activate.ps1"
    
    # Install psycopg2-binary (works with PostgreSQL 17)
    pip install psycopg2-binary
    
    # Also install database URL parser
    pip install dj-database-url
    
    Write-Host "‚úÖ PostgreSQL Python adapter installed" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  PostgreSQL adapter installation had issues: $_" -ForegroundColor Yellow
    Write-Host "üí° You may need to install Microsoft Visual C++ Build Tools" -ForegroundColor Yellow
}

# Step 5: Test database connection
Write-Host "`nüß™ Testing PostgreSQL 17 connection..." -ForegroundColor Yellow

$testScript = @"
import os
import django
from django.db import connection

# Set environment
os.environ['DB_ENGINE'] = 'django.db.backends.postgresql'
os.environ['DB_NAME'] = '$DBName'
os.environ['DB_USER'] = '$DBUser'
os.environ['DB_PASSWORD'] = '$DBPassword'
os.environ['DB_HOST'] = 'localhost'
os.environ['DB_PORT'] = '5432'

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'noctis_pro.settings')
django.setup()

try:
    with connection.cursor() as cursor:
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ PostgreSQL Connection Successful!")
        print(f"   Version: {version}")
        
        cursor.execute("SELECT current_database();")
        db_name = cursor.fetchone()[0]
        print(f"   Database: {db_name}")
        
    print("‚úÖ PostgreSQL 17 is ready for NoctisPro!")
except Exception as e:
    print(f"‚ùå Database connection failed: {e}")
    print("üí° Check your PostgreSQL 17 installation and credentials")
"@

try {
    $testScript | python
} catch {
    Write-Host "‚ö†Ô∏è  Database test had issues - this may be normal if Django isn't fully configured yet" -ForegroundColor Yellow
}

Write-Host "`nüéØ PostgreSQL 17 Configuration Complete!" -ForegroundColor Green
Write-Host "=" * 60 -ForegroundColor Green

Write-Host "`nüìã CONFIGURATION SUMMARY:" -ForegroundColor Cyan
Write-Host "   üóÑÔ∏è  Database: $DBName" -ForegroundColor White
Write-Host "   üë§ User: $DBUser" -ForegroundColor White
Write-Host "   üîë Password: $DBPassword" -ForegroundColor White
Write-Host "   üåê Host: localhost:5432" -ForegroundColor White
Write-Host "   üìÅ Environment: $envFile" -ForegroundColor White

Write-Host "`nüí° NEXT STEPS:" -ForegroundColor Yellow
Write-Host "   1. Run the main deployment script: .\universal_deploy_windows.ps1" -ForegroundColor White
Write-Host "   2. The system will automatically use PostgreSQL 17" -ForegroundColor White
Write-Host "   3. All DICOM images will be stored in PostgreSQL 17" -ForegroundColor White

Write-Host "`nüöÄ Ready to proceed with main deployment!" -ForegroundColor Green