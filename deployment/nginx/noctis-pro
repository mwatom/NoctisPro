# Nginx configuration for Noctis Pro DICOM System
# This file should be placed in /etc/nginx/sites-available/noctis-pro
# and symlinked to /etc/nginx/sites-enabled/

# Rate limiting
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;

# Upstream servers
upstream noctis_app {
    server 127.0.0.1:8000;
    # Add more servers for load balancing if needed
    # server 127.0.0.1:8001;
}

# HTTP to HTTPS redirect (when SSL is enabled)
server {
    listen 80;
    server_name _;
    
    # Allow Let's Encrypt challenges
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main server block
server {
    listen 80;
    listen [::]:80;
    
    # SSL configuration (uncomment when SSL certificates are available)
    # listen 443 ssl http2;
    # listen [::]:443 ssl http2;
    
    server_name _;
    
    # SSL certificates (Let's Encrypt)
    # ssl_certificate /etc/letsencrypt/live/DOMAIN_NAME/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/DOMAIN_NAME/privkey.pem;
    # ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN_NAME/chain.pem;
    
    # SSL configuration
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    # ssl_prefer_server_ciphers off;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 10m;
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # resolver 8.8.8.8 8.8.4.4 valid=300s;
    # resolver_timeout 5s;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self'; connect-src 'self' ws: wss:; media-src 'self'; object-src 'none'; frame-ancestors 'none';" always;
    
    # Enable HSTS (uncomment when using HTTPS)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Hide Nginx version
    server_tokens off;
    
    # Maximum file upload size (adjust as needed for DICOM files)
    client_max_body_size 500M;
    
    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Logging
    access_log /var/log/nginx/noctis_access.log;
    error_log /var/log/nginx/noctis_error.log;
    
    # Static files
    location /static/ {
        alias /opt/noctis/staticfiles/;
        expires 30d;
        add_header Cache-Control "public, immutable";
        
        # Gzip compression for static files
        gzip_static on;
        
        # Security headers for static files
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
    }
    
    # Media files (DICOM images, uploads)
    location /media/ {
        alias /opt/noctis/media/;
        expires 7d;
        add_header Cache-Control "private";
        
        # Restrict access to authenticated users only
        # This should be handled by Django, but adds an extra layer
        location ~* \.(dcm|dicom)$ {
            # Only allow access to DICOM files through the application
            return 403;
        }
    }
    
    # API rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://noctis_app;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
    
    # Login rate limiting
    location /login/ {
        limit_req zone=login burst=5 nodelay;
        proxy_pass http://noctis_app;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
    
    # WebSocket support for Django Channels
    location /ws/ {
        proxy_pass http://noctis_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # WebSocket timeout settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }
    
    # Admin panel with additional security
    location /admin-panel/ {
        # Optional: Restrict admin access to specific IP ranges
        # allow 192.168.1.0/24;
        # allow 10.0.0.0/8;
        # deny all;
        
        proxy_pass http://noctis_app;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
    
    # Main application
    location / {
        proxy_pass http://noctis_app;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # Health check
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ /\.env {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ /(Procfile|requirements\.txt|manage\.py|db\.sqlite3)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}