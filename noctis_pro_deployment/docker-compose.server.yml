version: '3.8'

services:
  # Database
  db:
    image: postgres:16-alpine
    container_name: noctis_db_prod
    environment:
      POSTGRES_DB: noctis_pro
      POSTGRES_USER: noctis_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-noctis_secure_pass_2024}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    networks:
      - internal

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: noctis_redis_prod
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - internal

  # Web Application
  web:
    build: .
    container_name: noctis_web_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=noctis_pro
      - POSTGRES_USER=noctis_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-noctis_secure_pass_2024}
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${DOMAIN_NAME},www.${DOMAIN_NAME},localhost
      - SECURE_SSL_REDIRECT=True
      - USE_TZ=True
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    restart: unless-stopped
    networks:
      - internal
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn noctis_pro.wsgi:application --bind 0.0.0.0:8000 --workers 4"
    depends_on:
      - db
      - redis

  # Background Tasks
  celery:
    build: .
    container_name: noctis_celery_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=noctis_pro
      - POSTGRES_USER=noctis_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-noctis_secure_pass_2024}
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - media_files:/app/media
    restart: unless-stopped
    networks:
      - internal
    command: celery -A noctis_pro worker --loglevel=info --concurrency=4
    depends_on:
      - db
      - redis

  # DICOM Receiver
  dicom:
    build: .
    container_name: noctis_dicom_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=noctis_pro
      - POSTGRES_USER=noctis_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-noctis_secure_pass_2024}
      - POSTGRES_HOST=db
    volumes:
      - media_files:/app/media
      - dicom_storage:/app/dicom_storage
    ports:
      - "11112:11112"
    restart: unless-stopped
    networks:
      - internal
    command: python dicom_receiver.py --port 11112 --aet NOCTIS_SCP --bind 0.0.0.0
    depends_on:
      - db
      - redis

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: noctis_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    networks:
      - internal
    depends_on:
      - web

volumes:
  db_data:
  redis_data:
  media_files:
  static_files:
  dicom_storage:

networks:
  internal:
    driver: bridge