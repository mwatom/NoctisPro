"""
Django settings for noctis_pro project.

Generated by 'Django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-7x!8k@m$z9h#4p&x3w2v6t@n5q8r7y#3e$6u9i%m&o^2d1f0g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Ngrok detection for automatic configuration
NGROK_URL = os.environ.get('NGROK_URL', '')
IS_NGROK = bool(NGROK_URL) or any('ngrok' in host for host in os.environ.get('ALLOWED_HOSTS', '').split(','))

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')

# Add ngrok and deployment specific hosts
ALLOWED_HOSTS.extend([
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    'noctispro',
    'noctispro2.duckdns.org',
    '*.duckdns.org',
    '*.ngrok.io',
    '*.ngrok-free.app',
    '*.ngrok.app',
    '*.loca.lt',
    'khaki-pigs-press.loca.lt',
    '3.222.223.4',
    '172.30.0.2',
])

# Add specific ngrok URL if provided
if NGROK_URL:
    # Extract domain from full URL
    import re
    ngrok_domain = re.sub(r'^https?://', '', NGROK_URL.strip('/'))
    ALLOWED_HOSTS.append(ngrok_domain)

# Remove duplicates and empty strings
ALLOWED_HOSTS = list(filter(None, list(set(ALLOWED_HOSTS))))


# Application definition

INSTALLED_APPS = [
    # 'daphne',  # Disabled temporarily to fix Redis dependency
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',  # Re-enabled for API access
    # 'channels',  # Disabled temporarily to fix Redis dependency
    
    # Custom apps - ENABLED FOR MEDICAL EMERGENCY
    'accounts',
    'worklist',  # ENABLED - CRITICAL FOR PATIENT DATA ACCESS
    'dicom_viewer',  # ENABLED - CRITICAL FOR MEDICAL IMAGING
    'reports',  # ENABLED - CRITICAL FOR MEDICAL REPORTS
    'admin_panel',  # ENABLED - CRITICAL FOR SYSTEM MANAGEMENT
    'chat',  # ENABLED - CRITICAL FOR MEDICAL COMMUNICATION
    'notifications',  # ENABLED - CRITICAL FOR MEDICAL ALERTS
    'ai_analysis',  # ENABLED - CRITICAL FOR MEDICAL AI
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Re-enabled
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'noctis_pro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'noctis_pro.wsgi.application'
# ASGI_APPLICATION = 'noctis_pro.asgi.application'  # Disabled temporarily

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Redis configuration for channels - Disabled for now to fix login
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }

# Use in-memory channel layer for now
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

# Celery Configuration - Disabled for now to fix login
# CELERY_BROKER_URL = 'redis://localhost:6379'
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
_extra_static_dir = os.path.join(BASE_DIR, 'static')
os.makedirs(_extra_static_dir, exist_ok=True)
STATICFILES_DIRS = [_extra_static_dir]

SERVE_MEDIA_FILES = os.environ.get('SERVE_MEDIA_FILES', 'True').lower() == 'true'

# Configure MIME types for static files
import mimetypes
mimetypes.add_type('application/javascript', '.js')
mimetypes.add_type('text/css', '.css')
mimetypes.add_type('application/json', '.json')

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# DICOM files storage
DICOM_ROOT = os.path.join(MEDIA_ROOT, 'dicom')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# CORS settings for ngrok and deployment
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
]

# Add specific ngrok URL to CORS if provided
if NGROK_URL:
    CORS_ALLOWED_ORIGINS.extend([
        NGROK_URL,
        NGROK_URL.replace('https://', 'http://') if NGROK_URL.startswith('https://') else NGROK_URL.replace('http://', 'https://')
    ])

# Add ngrok support dynamically
CORS_ALLOW_ALL_ORIGINS = DEBUG or IS_NGROK  # Allow all origins in debug mode or when using ngrok

CORS_ALLOW_CREDENTIALS = True

# CSRF trusted origins - Fix for 403 errors and ngrok support
CSRF_TRUSTED_ORIGINS = [
    "http://noctispro",
    "https://noctispro", 
    "https://*.ngrok.io",
    "https://*.ngrok-free.app",
    "https://*.ngrok.app",
    "http://*.ngrok.io",
    "http://*.ngrok-free.app", 
    "http://*.ngrok.app",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:80",
    "http://127.0.0.1:80",
    "http://localhost",
    "http://127.0.0.1",
    "https://localhost:8000",
    "https://127.0.0.1:8000",
    "https://*.duckdns.org",
    "http://*.duckdns.org",
]

# Add specific ngrok URL to CSRF trusted origins if provided
if NGROK_URL:
    CSRF_TRUSTED_ORIGINS.extend([
        NGROK_URL,
        NGROK_URL.replace('https://', 'http://') if NGROK_URL.startswith('https://') else NGROK_URL.replace('http://', 'https://')
    ])

# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# Login URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/worklist/'
LOGOUT_REDIRECT_URL = '/login/'

# Session configuration - Use database sessions instead of Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = True

# File upload settings - Enhanced for up to 5000 DICOM images
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024 * 1024  # 5GB for large DICOM batches
DATA_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024 * 1024  # 5GB for large DICOM batches
DATA_UPLOAD_MAX_NUMBER_FIELDS = 15000  # Support for up to 5000 images with metadata

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'SAMEORIGIN' if DEBUG or IS_NGROK else 'DENY'  # Allow embedding for ngrok

# Ngrok-specific security adjustments
if IS_NGROK:
    # Disable some security features that interfere with ngrok
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    # But keep others for security
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'

# Production security enhancements (only if not using ngrok)
if not DEBUG and not IS_NGROK:
    SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False').lower() == 'true'
    SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True

# Database
# Production database configuration with fallback to SQLite
DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.environ.get('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': os.environ.get('DB_USER', ''),
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),
        'HOST': os.environ.get('DB_HOST', ''),
        'PORT': os.environ.get('DB_PORT', ''),
    }
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'noctis_pro.log'),
            'maxBytes': 10*1024*1024,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'security': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'security.log'),
            'maxBytes': 5*1024*1024,  # 5MB
            'backupCount': 3,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security'],
            'level': 'WARNING',
            'propagate': False,
        },
        'noctis_pro': {
            'handlers': ['file', 'console'] if DEBUG else ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'worklist': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Performance settings for production
if not DEBUG:
    # Database connection pooling
    DATABASES['default']['CONN_MAX_AGE'] = 60
    
    # Cache static file serving
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Ngrok-specific settings for better performance
if IS_NGROK:
    # Already set above for all environments
    # Disable some checks that can cause issues with ngrok
    USE_TZ = True
    
print(f"🚀 Noctis Pro PACS Settings Loaded:")
print(f"   • Debug Mode: {DEBUG}")
print(f"   • Ngrok Mode: {IS_NGROK}")
print(f"   • Ngrok URL: {NGROK_URL or 'Not set'}")
print(f"   • Allowed Hosts: {len(ALLOWED_HOSTS)} configured")
print(f"   • Database: {DATABASES['default']['ENGINE'].split('.')[-1]}")
print(f"   • Security: {'Development' if DEBUG else 'Production'} profile")


# Masterpiece Auto-Deploy Optimizations
ALLOWED_HOSTS = ['mallard-shining-curiously.ngrok-free.app', 'localhost', '127.0.0.1', '0.0.0.0']
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = False  # ngrok handles SSL

# CSRF trusted origins for ngrok
CSRF_TRUSTED_ORIGINS = [
    'https://mallard-shining-curiously.ngrok-free.app',
    'http://localhost:8000',
    'http://127.0.0.1:8000'
]

# Session security for ngrok
SESSION_COOKIE_SECURE = False  # ngrok handles SSL
CSRF_COOKIE_SECURE = False     # ngrok handles SSL

# Static files optimization
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# DICOM viewer masterpiece settings
DICOM_VIEWER_SETTINGS = {
    'MAX_UPLOAD_SIZE': 100 * 1024 * 1024,  # 100MB
    'SUPPORTED_MODALITIES': ['CT', 'MR', 'CR', 'DX', 'US', 'XA'],
    'CACHE_TIMEOUT': 3600,
    'ENABLE_3D_RECONSTRUCTION': True,
    'ENABLE_MEASUREMENTS': True,
    'ENABLE_ANNOTATIONS': True,
    'ENABLE_AI_ANALYSIS': True,
    'ENABLE_QR_CODES': True,
    'ENABLE_LETTERHEADS': True,
}
