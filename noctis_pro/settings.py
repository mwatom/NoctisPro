"""
Django settings for noctis_pro project.

Generated by 'Django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-7x!8k@m$z9h#4p&x3w2v6t@n5q8r7y#3e$6u9i%m&o^2d1f0g')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'daphne',  # Re-enabled for production WebSocket support
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',  # Re-enabled for API access
    'channels',  # Re-enabled for real-time features
    
    # Custom apps
    'accounts',
    'worklist',
    'dicom_viewer',  # Re-enabled with performance optimizations
    'reports',  # Re-enabled to fix model registration
    'admin_panel',
    'chat',  # Re-enabled to fix template URLs
    'notifications',  # Re-enabled to fix User.notifications relationship
    'ai_analysis',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Re-enabled
    'django.middleware.security.SecurityMiddleware',
    'noctis_pro.middleware.SlowConnectionOptimizationMiddleware',  # Connection detection
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'noctis_pro.middleware.SessionTimeoutMiddleware',  # Session timeout handling - moved after auth
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'noctis_pro.middleware.ImageOptimizationMiddleware',  # Image optimization
    'noctis_pro.middleware.SessionTimeoutWarningMiddleware',  # Session timeout warnings
]

ROOT_URLCONF = 'noctis_pro.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'noctis_pro.wsgi.application'
ASGI_APPLICATION = 'noctis_pro.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Channel layers configuration
if os.environ.get('DISABLE_REDIS', 'False').lower() == 'true':
    # Use in-memory channel layer for container deployments
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
        },
    }
else:
    # Redis configuration for channels
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                "hosts": [os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379')],
            },
        },
    }

# Celery Configuration
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
_extra_static_dir = os.path.join(BASE_DIR, 'static')
os.makedirs(_extra_static_dir, exist_ok=True)
STATICFILES_DIRS = [_extra_static_dir]

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# DICOM files storage
DICOM_ROOT = os.path.join(MEDIA_ROOT, 'dicom')

# Image optimization settings for slow connections
IMAGE_OPTIMIZATION = {
    'ENABLE': True,
    'DEFAULT_QUALITY': 70,
    'SLOW_CONNECTION_QUALITY': 50,
    'MAX_WIDTH': 1920,
    'MAX_HEIGHT': 1080,
    'SLOW_CONNECTION_MAX_WIDTH': 800,
    'SLOW_CONNECTION_MAX_HEIGHT': 600,
    'FORMATS': {
        'auto': True,  # Auto-detect best format
        'webp': True,  # Enable WebP for better compression
        'jpeg': True,
        'png': True,
    },
    'CACHE_OPTIMIZED': True,  # Cache optimized images
    'CACHE_TTL': 86400,  # 24 hours
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# CSRF settings for ngrok support
CSRF_TRUSTED_ORIGINS = [
    'https://*.ngrok.io',
    'https://*.ngrok-free.app',
    'https://*.ngrok.app',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# Custom user model
AUTH_USER_MODEL = 'accounts.User'

# Login URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/worklist/'
LOGOUT_REDIRECT_URL = '/login/'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 100MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 100MB

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Production security enhancements
if not DEBUG:
    SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False').lower() == 'true'
    SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'True').lower() == 'true'
    CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'True').lower() == 'true'
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True

# Session timeout and auto-logout settings
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = int(os.environ.get('SESSION_TIMEOUT_MINUTES', '30')) * 60  # Default 30 minutes
SESSION_SAVE_EVERY_REQUEST = True  # Reset timer on every request
SESSION_TIMEOUT_WARNING = int(os.environ.get('SESSION_WARNING_MINUTES', '5')) * 60  # Warning 5 minutes before timeout

# Database
# Support both SQLite and PostgreSQL based on environment
if os.environ.get('USE_SQLITE', 'False').lower() == 'true' or not os.environ.get('POSTGRES_PASSWORD'):
    # Use SQLite database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.environ.get('DATABASE_PATH', os.path.join(BASE_DIR, 'db.sqlite3')),
        }
    }
else:
    # Use PostgreSQL database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_DB', 'noctis_pro'),
            'USER': os.environ.get('POSTGRES_USER', 'noctis_user'),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),
            'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
            'PORT': os.environ.get('POSTGRES_PORT', '5432'),
            'OPTIONS': {
                'sslmode': 'prefer',
            },
            'CONN_MAX_AGE': 600,  # Connection pooling
            'CONN_HEALTH_CHECKS': True,
        }
    }

# Cache configuration
if os.environ.get('USE_DUMMY_CACHE', 'False').lower() == 'true':
    # Use local memory cache for container deployments without Redis
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'noctispro-cache',
        }
    }
    # Use database sessions when Redis is not available
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
else:
    # Use local memory cache and database sessions for development
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'noctispro-dev-cache',
        }
    }
    # Use database sessions when Redis is not available
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'noctis_pro.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'noctis_pro': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
